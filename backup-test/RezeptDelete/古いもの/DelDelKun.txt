--------------------------------------------------------------------------------------------------------------------------------
--想定時間は開発機での検証であり、実サーバは1.4倍程度処理が遅い(インデックス削除、インデックス作成時間から推察)
--------------------------------------------------------------------------------------------------------------------------------
-- TOP(4,000件)をDELETE実行し、160,000件ずつ(40ループ)コミットしていると、TOP(4,000件)をDELETEがどんどん遅くなる
-- TOP(4,000件)が分を超えはじめ、39,024,000件あたりから5分以上かかり、このあとはどんどん遅くなる
-- 3分割してみる(78,130,597－39,000,000＝39,130,597)
--【1回目】39,000,000件削除
--      <18:00～翌8:00>
--      ①インデックス削除(3.0H)
--      ②削除ループ(11.0H)
--      「オプション」
--      開始時対象レコードカウント：する(初回でインデックス削除前だから)
--      終了時対象レコードカウント：しない(インデックスないから)
--      インデックス削除処理：する(初回だから)
--      インデックス作成処理：しない(次がはしるから)
--      統計情報取得処理：しない(インデックスないから)
--      処理中断時刻：予定からいくと08:30には終わってないと困る
--%sqlcmd% -Q "EXEC DelDelKun 20150101,20151231,39000000,160000,'00:00',0,'0830','1','0','1','0','0'" >> %fileNameLog%  2>&1
--------------------------------------------------------------------------------------------------------------------------------
-- TOP(4,000件)をDELETE実行し、160,000件ずつ(40ループ)コミットしていると、TOP(4,000件)をDELETEがどんどん遅くなる
-- TOP(4,000件)が分を超えはじめ、39,024,000件あたりから5分以上かかり、このあとはどんどん遅くなる
-- 3分割してみる(78,130,597－39,000,000－39,000,000＝130,597)
--【2回目】39,000,000件削除
--      <9:00～20:00>
--      ①削除ループ(11.0H)
--      「オプション」
--      開始時対象レコードカウント：しない(インデックスないから)
--      終了時対象レコードカウント：しない(インデックスないから)
--      インデックス削除処理：しない(途中だから)
--      インデックス作成処理：しない(次がはしるから)
--      統計情報取得処理：しない(インデックスないから)
--      処理中断時刻：予定からいくと20:30には終わってないと困る
--%sqlcmd% -Q "EXEC DelDelKun 20150101,20151231,39000000,160000,'00:00',0,'2030','0','0','0','0','0'" >> %fileNameLog%  2>&1
--------------------------------------------------------------------------------------------------------------------------------
-- TOP(4,000件)をDELETE実行し、160,000件ずつ(40ループ)コミットしていると、TOP(4,000件)をDELETEがどんどん遅くなる
-- TOP(4,000件)が分を超えはじめ、39,024,000件あたりから5分以上かかり、このあとはどんどん遅くなる
-- 3分割してみる(78,130,597－39,000,000－39,000,000－130,597＝0)
--【3回目】39,000,000件削除(端数も含めて全部処理)※本当は、130,597件なのだが、消せていないかもしれないから
--      <21:00～翌1:00>
--      ①削除ループ(0.1H)
--      ②インデックス作成(3.8H)
--      ③統計情報取得(0.1H)
--      「オプション」
--      開始時対象レコードカウント：しない(インデックスないから)
--      終了時対象レコードカウント：する(インデックスあるから)
--      インデックス削除処理：しない(途中だから)
--      インデックス作成処理：する(おわったから)
--      統計情報取得処理：する(おわったから)
--%sqlcmd% -Q "EXEC DelDelKun 20150101,20151231,39000000,160000,'00:00',0,'9999','0','1','0','1','1'" >> %fileNameLog%  2>&1
--------------------------------------------------------------------------------------------------------------------------------
--『実行結果(ログから抜粋)』
--
--【1回目】39,000,000件削除実績(18:00～翌7:47)
--2024/12/16 18:00:00：処理開始--------------------------------------------------------------
--削除開始 取込日            ：20150101
--削除終了 取込日            ：20151231
--今回削除したい件数         ：39,000,000 件
--コミットしたい件数         ：160,000 件
--コミット後の待ち時間(mm:ss)：00:00
--統計情報再取得コミット回数 ： 回
--処理中断時刻               ：0830
--開始時対象レコードカウント ：1
--終了時対象レコードカウント ：0
--インデックス削除処理       ：1
--インデックス作成処理       ：0
--統計情報取得処理           ：0
-- 
--現在日時    ：2024-12-16 1800
--処理中断日時：2024-12-17 0830
--★処理前対象件数：78,130,597 件
-- 
--2024/12/16 18:00:43：インデックス削除処理開始
--2024/12/16 21:07:40：インデックス削除処理終了
--2024/12/16 21:07:40：トランザクション開始 ↓↓↓<000001>
-- ・
-- ・
-- ・
--今回の削除総件数(@DelAllCount)              = 39,000,000 件
--削除完了
--削除完了@wkRowCount
--(DEL)↑↑↑↑↑-----------<000031>
-- 
--2024/12/17 07:47:01：コミット↑↑↑ <000244>
-- 
--削除完了
--2024/12/17 07:47:01：処理終了--------------------------------------------------------------
--正常終了しました。
--------------------------------------------------------------------------------------------------------------------------------
--








--求償のレセプトを「取込日」の範囲指定で削除するわ
--翌営業日に影響すると困るから、
--処理後の
--インデックスの作成(5H弱)「※処理前のインデックスの削除は4H程度かかる」
--統計情報の取得(6m程度)
--の5H程度を考慮する。
--例えば、AM7:00には全て終了しておきたい場合は
--5時間前のAM2:00にはメインの削除処理を終了しておきたい時間として
--処理中断時刻に「0200」を設定する
--削除→削除→････→削除→コミット→削除→削除→････→削除→コミット････を繰り返すと
--途中でめちゃめちゃ遅くなるので指定回数(統計情報再取得件数)コミットしたら統計情報を取得し直す
--効果はまだわからん→いみない
--コミット後にSLEEPもいみないかんじ



CREATE PROCEDURE DelDelKun
    @DelStartYYYYMMDD NVARCHAR(8)
   ,@DelEndYYYYMMDD   NVARCHAR(8)
   ,@DelYoukyuCnt     int
   ,@CommitCnt        int
   ,@CommitWaitFor    NVARCHAR(5)
   ,@ReStatusCnt      int
   ,@LimitHHmm        NVARCHAR(5)
   ,@StartRecCnt      NVARCHAR(1)
   ,@EndRecCnt        NVARCHAR(1)
   ,@IndexDel         NVARCHAR(1)
   ,@IndexCre         NVARCHAR(1)
   ,@Stat             NVARCHAR(1)
AS
BEGIN

    -------------------------------------------------
    --【パラメータ表示】
    PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：処理開始--------------------------------------------------------------'
    PRINT '削除開始 取込日            ：' + @DelStartYYYYMMDD
    PRINT '削除終了 取込日            ：' + @DelEndYYYYMMDD
    PRINT '今回削除したい件数         ：' + FORMAT(@DelYoukyuCnt, '#,###') + ' 件'
    PRINT 'コミットしたい件数         ：' + FORMAT(@CommitCnt, '#,###') + ' 件'
    PRINT 'コミット後の待ち時間(mm:ss)：' + @CommitWaitFor
    PRINT '統計情報再取得コミット回数 ：' + FORMAT(@ReStatusCnt, '#,###') + ' 回'
    PRINT '処理中断時刻               ：' + @LimitHHmm
    PRINT '開始時対象レコードカウント ：' + @StartRecCnt
    PRINT '終了時対象レコードカウント ：' + @EndRecCnt
    PRINT 'インデックス削除処理       ：' + @IndexDel
    PRINT 'インデックス作成処理       ：' + @IndexCre
    PRINT '統計情報取得処理           ：' + @Stat
    PRINT ''
    -------------------------------------------------


    -------------------------------------------------
    --【変数】
    DECLARE @TodayYmd      NVARCHAR(10) = ''    --現在日(yyyy-MM-dd)
    DECLARE @TodayHm       NVARCHAR(5)  = ''    --現在時刻(HHmm)
    DECLARE @TodayYmdHms   NVARCHAR(19) = ''    --現在日時(yyyy-MM-dd HHmm)
    DECLARE @LimitYmdHms   NVARCHAR(19) = ''    --処理中断日時(yyyy-MM-dd HHmm)
    DECLARE @DelCount      INT = 4000           --削除件数(1度のDELETEを発行する最適件数らしい)
    DECLARE @wkDelCount    INT = 4000           --削除件数(SQL実行用)
    DECLARE @wkRowCount    INT = 0              --削除結果件数(SQL実行後)
    DECLARE @DelZumiCount  INT = 0              --削除済件数
    DECLARE @DelAllCount   INT = 0              --削除総件数
    DECLARE @iTransLoop    INT = 1              --トランザクションループフラグ(0:ループ終了/1:ループ継続)
    DECLARE @iDelLoop      INT = 1              --削除ループフラグ(0:ループ終了/1:ループ継続)
    DECLARE @iCommit       INT = 0              --コミット回数
    DECLARE @idel          INT = 0              --コミット内削除回数
	DECLARE @taisyoCount   INT = 0              --対象件数
    -------------------------------------------------

    BEGIN TRY

        -------------------------------------------------
        --【処理中断日時]を設定する
        --⇒パラメータの処理中断時刻(@LimitHHmm)が'9999'の場合は、今回処理中には到達しないちょっと未来日を設定することで処理中断を抑止する
        --⇒※9999年などにするとSqlServerで意図しない動作をするかもしれないので、適度なちょい未来日を設定している
        --⇒パラメータの処理中断時刻(@LimitHHmm)「時分(24H表記)」が現在時刻より小さい場合は、翌日として設定する
        --現在日を取得
        SET @TodayYmd = FORMAT(GETDATE(), 'yyyy-MM-dd')
        --現在時刻を取得
        SET @TodayHm= FORMAT(GETDATE(), 'HHmm')
        --現在日時を設定
        SET @TodayYmdHms = @TodayYmd + ' ' + @TodayHm
        
        --処理中断日時無制限
        IF @LimitHHmm = '9999'
            BEGIN
                SET @LimitYmdHms = '2099-12-31 9999'
            END
        ELSE
            BEGIN
                --処理中断日時が現在時刻より小さい場合は翌日と判断
                IF @TodayHm > @LimitHHmm
                    BEGIN
                        --翌日と処理中断時刻を文字列結合(yyyy-MM-dd HHmm)
                        SET @LimitYmdHms = FORMAT(DATEADD(day, 1, @TodayYmd), 'yyyy-MM-dd') + ' ' + @LimitHHmm
                    END
                ELSE
                    --本日と処理中断時刻を文字列結合(yyyy-MM-dd HHmm)
                    SET @LimitYmdHms = @TodayYmd + ' ' + @LimitHHmm
            END

        PRINT '現在日時    ：' + @TodayYmdHms
        PRINT '処理中断日時：' + @LimitYmdHms
        -------------------------------------------------


        -------------------------------------------------
        --【メイン処理】
        --現在日時が処理中断日時を経過していた場合は、そもそも処理しない
        IF @TodayYmdHms < @LimitYmdHms
            BEGIN
                --処理中断日時を迎えていない

                -------------------------------------------------
                --<前処理>
                --【処理前対象件数取得】
                IF @StartRecCnt = '1'
                    BEGIN
                        SET @taisyoCount = (SELECT COUNT(TORIKOMI_YMD) FROM T_REZEPT WHERE TORIKOMI_YMD BETWEEN @DelStartYYYYMMDD AND @DelEndYYYYMMDD)
                        PRINT '★処理前対象件数：' + FORMAT(@taisyoCount, '#,###') + ' 件'
                        PRINT ''
                    END
                -------------------------------------------------


                -------------------------------------------------
                --<前処理>
                IF @IndexDel = '1'
                    BEGIN
                        --【インデックス削除】
                        PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：インデックス削除処理開始'
                        ALTER TABLE [T_REZEPT] DROP CONSTRAINT [PK_T_REZEPT]
                        Drop INDEX TIX__REZEPT_1 ON T_REZEPT
                        Drop INDEX TIX__REZEPT_2 ON T_REZEPT
                        Drop INDEX TIX__REZEPT_3 ON T_REZEPT
                        Drop INDEX TIX__REZEPT_4 ON T_REZEPT
                        Drop INDEX TIX__REZEPT_5 ON T_REZEPT
                        Drop INDEX TIX__REZEPT_6 ON T_REZEPT
                        PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：インデックス削除処理終了'
                    END
                -------------------------------------------------


                -------------------------------------------------
                --<本処理>
                --【トランザクションループ】
                --⇒今回の削除総件数(@DelAllCount)が、今回削除したい件数(@DelYoukyuCnt)達したらループを抜ける
                -- or
                --⇒削除開始 取込日(@DelStartYYYYMMDD)～削除終了 取込日(@DelEndYYYYMMDD)の対象を全て削除したらループを抜ける
                -- or
                --⇒処理中に現在時刻が、処理中断日時(@LimitYmdHms)を経過したらループを抜ける
                WHILE @iTransLoop > 0
                    BEGIN --WHILE

                        SET @iCommit = @iCommit + 1 --コミット回数
                        -------------------------------------------------
                        --【トランザクション開始】
                        BEGIN TRANSACTION
                        PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：トランザクション開始 ↓↓↓<' + FORMAT(@iCommit, '000000') + '>'
                        -------------------------------------------------


                        -------------------------------------------------
                        --【削除ループ】
                        --⇒コミットまでの削除済件数(@DelZumiCount)が、コミットしたい件数(@CommitCnt)に達した場合、ループを抜けてコミットする
                        -- or
                        --⇒DELETEコマンド削除結果件数(@wkRowCount)が、DELETEコマンド発行件数(@DelCount)より少ない場合<EndOfData>、ループを抜けてコミットする
                        -- or
                        --⇒処理中に現在時刻が、処理中断日時(@LimitYmdHms)を経過したらループを抜けてコミットする
                        SET @idel = 0 --コミット内削除回数初期化
                        WHILE @iDelLoop > 0
                            BEGIN --WHILE

                                --次の4000件削除で今回削除したい件数(@DelYoukyuCnt)を超えてしまう場合は、残りの削除件数を算出する
                                IF (@DelAllCount + @DelCount) > @DelYoukyuCnt
                                    BEGIN
                                        --4000件未満の残りの削除したい端数の件数を算出し、削除件数(SQL実行用)(@wkDelCount)に設定する
                                        SET @wkDelCount = @DelYoukyuCnt - @DelAllCount 
                                    END
                                --次の4000件削除でも今回削除したい件数(@DelYoukyuCnt)を超えない場合は、削除件数(SQL実行用)(@wkDelCount)に4000件を設定する
                                ELSE
                                    BEGIN
                                        --4000件を削除件数(SQL実行用)(@wkDelCount)に設定する
                                        SET @wkDelCount = @DelCount
                                    END

                                -------------------------------------------------
                                --【削除処理】
                                --削除件数(SQL実行用)(@wkDelCount)を削除する
                                SET @idel = @idel + 1 --コミット内削除回数加算
                                PRINT '(DEL)↓↓↓↓↓-----------<' + FORMAT(@iDel, '000000') + '>'
                                PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：' + FORMAT(@wkDelCount, '#,###') + ' 件 削除開始 deldeldeldeldeldelkun'
                                DELETE TOP (@wkDelCount) FROM T_REZEPT WHERE TORIKOMI_YMD BETWEEN @DelStartYYYYMMDD AND @DelEndYYYYMMDD
                                --DELETEコマンド削除結果件数
                                SET @wkRowCount = @@ROWCOUNT --@@ROWCOUNTはDELETE発行直後に別変数(@wkRowCount)に退避して参照しないと随時変わってしまう
                                PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：' + FORMAT(@wkDelCount, '#,###') + ' 件 削除終了 deldeldeldeldeldelkun'
                                -------------------------------------------------


                                --コミットまでの削除済件数
                                SET @DelZumiCount = @DelZumiCount + @wkRowCount
                                --今回の削除総件数
                                SET @DelAllCount = @DelAllCount + @wkRowCount

                                PRINT 'DELETEコマンド発行件数(@DelCount)           = ' + FORMAT(@DelCount, '#,###') + ' 件'
                                PRINT 'DELETEコマンド削除結果件数(@wkRowCount)     = ' + FORMAT(@wkRowCount, '#,###') + ' 件'
                                PRINT 'コミットまでの削除済件数(@DelZumiCount)     = ' + FORMAT(@DelZumiCount, '#,###') + ' 件'
                                PRINT '今回の削除総件数(@DelAllCount)              = ' + FORMAT(@DelAllCount, '#,###') + ' 件'

                                --DELETEコマンド削除結果件数(@wkRowCount)が4000件未満の場合、最後の削除が実行されたと判断する(EndOfData)
                                IF @wkRowCount < @DelCount
                                    BEGIN
                                        PRINT '削除完了@wkRowCount < @DelCount'
                                        --全ループ終了
                                        SET @iTransLoop = 0 --トランザクションループ終了
                                        SET @iDelLoop   = 0 --削除ループ終了
                                    END
                                --DELETEコマンド削除結果件数(@wkRowCount)が4000件の場合、次の削除ループ前に現在日時を判定し、
                                --現在日時が処理中断日時を経過していた場合は、処理を中断する
                                ELSE
                                    BEGIN
                                        --現在日時を取得
                                        SET @TodayYmdHms = FORMAT(GETDATE(), 'yyyy-MM-dd HHmm')

                                        PRINT '現在日時    ：' + @TodayYmdHms
                                        PRINT '処理中断時刻：' + @LimitYmdHms

                                        --現在日時が処理中断日時を経過していた場合は、処理を中断する
                                        IF @TodayYmdHms >= @LimitYmdHms
                                            BEGIN
                                                PRINT '現在日時(' + @TodayYmdHms + ')が処理中断時刻(' + @LimitYmdHms + ')を経過したため処理を終了します。'
                                                PRINT '削除中断'
                                                --全ループ終了
                                                SET @iTransLoop = 0 --トランザクションループ終了
                                                SET @iDelLoop   = 0 --削除ループ終了
                                            END
                                    END

                                --コミットしたい件数に達した
                                IF @CommitCnt <= @DelZumiCount
                                    BEGIN
                                        PRINT 'コミット実行します'
                                        --削除ループ終了
                                        SET @iDelLoop     = 0
                                        --コミットまでの削除済件数(@DelZumiCount)を初期化
                                        SET @DelZumiCount = 0
                                    END
                                --コミットしたい件数に達していない
                                ELSE
                                    --DELETEコマンド削除結果件数(@wkRowCount)が0件以下の場合は、削除対象がもうなくなりDELETEが空振りしているので処理を終了する
                                    IF @wkRowCount <= 0
                                        BEGIN
                                            PRINT '削除完了@wkRowCount <= 0'
                                            --全ループ終了
                                            SET @iTransLoop = 0 --トランザクションループ終了
                                            SET @iDelLoop   = 0 --削除ループ終了
                                        END
                                    ELSE
                                        --今回の削除総件数(@DelAllCount)がパラメータの今回削除したい件数(@DelYoukyuCnt)に達している場合は、処理を終了する
                                        IF @DelYoukyuCnt <= @DelAllCount
                                            BEGIN
                                                --PRINT '削除完了@DelYoukyuCnt <= @DelAllCount'
                                                --全ループ終了
                                                SET @iTransLoop = 0 --トランザクションループ終了
                                                SET @iDelLoop   = 0 --削除ループ終了
                                            END

                                PRINT '(DEL)↑↑↑↑↑-----------<' + FORMAT(@iDel, '000000') + '>'
                                PRINT ''
                            END   --WHILE
                            -------------------------------------------------


                            -------------------------------------------------
                            --【コミット】
                            COMMIT TRANSACTION;
                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：コミット↑↑↑ <' + FORMAT(@iCommit, '000000') + '>'
                            PRINT ''
                            -------------------------------------------------


                            --今回の削除総件数(@DelAllCount)がパラメータの今回削除したい件数(@DelYoukyuCnt)に達している場合は、処理を終了する
                            IF @DelYoukyuCnt <= @DelAllCount
                                BEGIN
                                    PRINT '削除完了@DelYoukyuCnt <= @DelAllCount'
                                    --全ループ終了
                                    SET @iTransLoop = 0 --トランザクションループ終了

                                    -------------------------------------------------
                                    --コミット後の待ち時間(秒)
                                    IF @CommitWaitFor != '00:00'
                                        BEGIN
                                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：コミット後の待ち時間(' + @CommitWaitFor + ')開始↓↓↓'
                                            WAITFOR DELAY @CommitWaitFor
                                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：コミット後の待ち時間(' + @CommitWaitFor + ')終了↑↑↑'
                                        END
                                    -------------------------------------------------

                                END
                            --今回の削除総件数(@DelAllCount)がパラメータの今回削除したい件数(@DelYoukyuCnt)に達していない場合は、次のトランザクションループを処理する
                            ELSE
                                BEGIN
                                    --削除継続
                                    SET @iDelLoop = 1--次の削除ループへ

                                    -------------------------------------------------
                                    --コミット後の待ち時間(秒)
                                    IF @CommitWaitFor != '00:00'
                                        BEGIN
                                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：コミット後の待ち時間(' + @CommitWaitFor + ')開始↓↓↓'
                                            WAITFOR DELAY @CommitWaitFor
                                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：コミット後の待ち時間(' + @CommitWaitFor + ')終了↑↑↑'
                                        END
                                    -------------------------------------------------


                                    -------------------------------------------------
                                    --統計情報再取得コミット回数単位で統計情報を再取得する
                                    IF @ReStatusCnt != 0
                                        BEGIN
                                            IF @iCommit % @ReStatusCnt = 0
                                                BEGIN
                                                    PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：統計情報再取得開始(T_REZEPT)↓↓↓'
                                                    update statistics t_rezept
                                                    PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：統計情報再取得終了(T_REZEPT)↑↑↑'
                                                    PRINT ''
                                                END
                                        END
                                    -------------------------------------------------

                                END

                    END --WHILE
                    -------------------------------------------------


                    -------------------------------------------------
                    --<後処理>
                    IF @IndexCre = '1'
                        BEGIN
                            --【インデックス作成】
                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：インデックス作成処理開始'

                            --インデックス作成
                            ALTER TABLE [T_REZEPT] ADD  CONSTRAINT [PK_T_REZEPT] PRIMARY KEY CLUSTERED 
                            (
                                [REZEPT_ZENKOKU_KYOUTSUU_KEY] ASC
                            )

                            CREATE   INDEX TIX__REZEPT_1 ON T_REZEPT
                            (
                                KOKUHOROJIN_KBN ASC
                                ,HOKENSHA_NO ASC
                                ,HIKOKENSHASHO_NO ASC
                                ,KOJIN_NO ASC
                                ,SHINRYOU_YM ASC
                            )

                            --TABLE レセプトデータ  INDEX TIX__REZEPT_2
                            CREATE   INDEX TIX__REZEPT_2 ON T_REZEPT
                            (
                                TORIKOMI_YMD ASC
                            )

                            --TABLE レセプトデータ  INDEX TIX__REZEPT_3
                            CREATE   INDEX TIX__REZEPT_3 ON T_REZEPT (
                                KOKUHOROJIN_KBN ASC
                                ,HOKENSHA_NO ASC
                                ,KOJIN_NO ASC
                                ,HIGAISHA_KNJ ASC
                                ,SHINRYOU_YM ASC
                            )

                            --TABLE レセプトデータ  INDEX TIX__REZEPT_4
                            CREATE   INDEX TIX__REZEPT_4 ON T_REZEPT (
                                KOKUHOROJIN_KBN ASC
                                ,HOKENSHA_NO ASC
                                ,HIGAISHA_KNJ ASC
                                ,SHINRYOU_YM ASC
                            )

                            --TABLE レセプトデータ  INDEX TIX__REZEPT_5
                            CREATE   INDEX TIX__REZEPT_5 ON T_REZEPT
                            (
                                KOKUHOROJIN_KBN ASC
                                ,HOKENSHA_NO ASC
                                ,HIGAISHA_KANA ASC
                                ,SHINRYOU_YM ASC
                            )

                            --TABLE レセプトデータ  INDEX TIX__REZEPT_6
                            CREATE   INDEX TIX__REZEPT_6 ON T_REZEPT
                            (
                                NARABIJYUN ASC
                            )
                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：インデックス作成処理終了'
                        END
                    -------------------------------------------------


                    -------------------------------------------------
                    --<後処理>
                    IF @Stat = '1'
                        BEGIN
                            --【統計情報取得処理】
                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：統計情報取得処理開始'
                            EXEC sp_updatestats
                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：統計情報取得処理終了'
                        END
                    IF @Stat = '2'
                        BEGIN
                            --【統計情報取得処理】
                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：統計情報取得処理開始(T_REZEPT)'
                            UPDATE STATISTICS T_REZEPT
                            PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：統計情報取得処理終了(T_REZEPT)'
                        END
                    -------------------------------------------------


                    -------------------------------------------------
                    --<後処理>
                    IF @EndRecCnt = '1'
                        BEGIN
                            --【処理前対象件数取得】
                            SET @taisyoCount = (SELECT COUNT(TORIKOMI_YMD) FROM T_REZEPT WHERE TORIKOMI_YMD BETWEEN @DelStartYYYYMMDD AND @DelEndYYYYMMDD)
                            PRINT ''
                            PRINT '★処理後対象件数：' + FORMAT(@taisyoCount, '#,###') + ' 件'
                            PRINT ''
                        END
                    -------------------------------------------------



            END
        ELSE
            --実際には削除実行前に処理中断時刻を迎えることはほぼほぼないわ(翌日扱いなるからね)
            BEGIN
                --削除処理実行前に
                --開始時刻が処理中断日時を迎えてしまったので処理しない
                PRINT '現在日時(' + @TodayYmdHms + ')が処理中断時刻(' + @LimitYmdHms + ')を経過したため処理を終了します。'
            END
    END TRY

    --例外エラー発生時処理
    BEGIN CATCH 

        -------------------------------------------------
        --<エラー発生時後処理>
        --【ロールバック】
        ROLLBACK TRANSACTION
        PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：ロールバック↑↑↑'
        -------------------------------------------------


		
        -------------------------------------------------
        --<エラー発生時後処理>
        --【インデックス作成】
        IF @IndexCre = '1'
            BEGIN
                --【インデックス作成】
                PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：インデックス作成処理開始'

                --インデックス作成
                ALTER TABLE [T_REZEPT] ADD  CONSTRAINT [PK_T_REZEPT] PRIMARY KEY CLUSTERED 
                (
                    [REZEPT_ZENKOKU_KYOUTSUU_KEY] ASC
                )

                CREATE   INDEX TIX__REZEPT_1 ON T_REZEPT
                (
                    KOKUHOROJIN_KBN ASC
                    ,HOKENSHA_NO ASC
                    ,HIKOKENSHASHO_NO ASC
                    ,KOJIN_NO ASC
                    ,SHINRYOU_YM ASC
                )

                --TABLE レセプトデータ  INDEX TIX__REZEPT_2
                CREATE   INDEX TIX__REZEPT_2 ON T_REZEPT
                (
                    TORIKOMI_YMD ASC
                )

                --TABLE レセプトデータ  INDEX TIX__REZEPT_3
                CREATE   INDEX TIX__REZEPT_3 ON T_REZEPT (
                    KOKUHOROJIN_KBN ASC
                    ,HOKENSHA_NO ASC
                    ,KOJIN_NO ASC
                    ,HIGAISHA_KNJ ASC
                    ,SHINRYOU_YM ASC
                )

                --TABLE レセプトデータ  INDEX TIX__REZEPT_4
                CREATE   INDEX TIX__REZEPT_4 ON T_REZEPT (
                    KOKUHOROJIN_KBN ASC
                    ,HOKENSHA_NO ASC
                    ,HIGAISHA_KNJ ASC
                    ,SHINRYOU_YM ASC
                )

                --TABLE レセプトデータ  INDEX TIX__REZEPT_5
                CREATE   INDEX TIX__REZEPT_5 ON T_REZEPT
                (
                    KOKUHOROJIN_KBN ASC
                    ,HOKENSHA_NO ASC
                    ,HIGAISHA_KANA ASC
                    ,SHINRYOU_YM ASC
                )

                --TABLE レセプトデータ  INDEX TIX__REZEPT_6
                CREATE   INDEX TIX__REZEPT_6 ON T_REZEPT
                (
                    NARABIJYUN ASC
                )
                PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：インデックス作成処理終了'
            END
        -------------------------------------------------


        -------------------------------------------------
        --<後処理>
        --<エラー発生時後処理>
        IF @Stat = '1'
            BEGIN
                --【統計情報取得処理】
                PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：統計情報取得処理開始'
                EXEC sp_updatestats
                PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：統計情報取得処理終了'
            END
        IF @Stat = '2'
            BEGIN
                --【統計情報取得処理】
                PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：統計情報取得処理開始(T_REZEPT)'
                UPDATE STATISTICS T_REZEPT
                PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：統計情報取得処理終了(T_REZEPT)'
            END
        -------------------------------------------------


        -------------------------------------------------
        --<エラー発生時後処理>
        --<後処理>
        IF @EndRecCnt = '1'
            BEGIN
                --【処理前対象件数取得】
                SET @taisyoCount = (SELECT COUNT(*) FROM T_REZEPT WHERE TORIKOMI_YMD BETWEEN @DelStartYYYYMMDD AND @DelEndYYYYMMDD)
                PRINT ''
                PRINT '★処理後対象件数：' + FORMAT(@taisyoCount, '#,###') + ' 件'
                PRINT ''
            END
        -------------------------------------------------


    END CATCH

    -------------------------------------------------
    --【後処理】
    PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：ログ圧縮開始'
    dbcc shrinkfile (KYUSYO_log, 0)
    PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：ログ圧縮終了'
    -------------------------------------------------

    -------------------------------------------------
    --【後処理】
    --データファイル圧縮(2.5H)
    PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：データファイル圧縮開始'
    DBCC SHRINKDATABASE ('KYUSYO2', 0)
    PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：データファイル圧縮終了'
    -------------------------------------------------



    PRINT FORMAT(GETDATE(), 'yyyy/MM/dd HH:mm:ss') + '：処理終了--------------------------------------------------------------'

END
